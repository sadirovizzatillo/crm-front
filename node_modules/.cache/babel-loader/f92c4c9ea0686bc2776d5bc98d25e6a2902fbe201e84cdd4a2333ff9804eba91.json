{"ast":null,"code":"import { onMounted, reactive, ref } from 'vue';\nimport { useDoctors } from \"@/store/doctors.pinia\";\nimport { useToast } from \"@/store/toast.pinia\";\nimport router from '@/router';\nimport TheComponentHeader from '@/components/TheComponentHeader.vue';\nimport Request from '@/api';\nimport { storeToRefs } from 'pinia';\nexport default {\n  __name: 'RegisterForm',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const ruleFormRef = ref();\n    const storeDoctor = useDoctors();\n    const {\n      doctors\n    } = storeToRefs(storeDoctor);\n    const doctorId = ref(null);\n    const ruleForm = reactive({\n      name: '',\n      dateOfBirth: null,\n      surname: '',\n      category: '',\n      serviceCost: '',\n      advertisementName: '',\n      region: '',\n      city: '',\n      doctorId: null,\n      address: '',\n      gender: 'ERKAK'\n    });\n    const rules = reactive({\n      doctorName: [{\n        required: true,\n        message: 'Iltimos ism kiriting',\n        trigger: 'blur'\n      }],\n      surname: [{\n        required: true,\n        message: 'Iltimos familiya kiriting',\n        trigger: 'blur'\n      }],\n      category: [{\n        required: true,\n        message: 'Iltimos kategoriya kiriting',\n        trigger: 'blur'\n      }],\n      serviceCost: [{\n        required: true,\n        message: 'Iltimos xizmat narxini kiriting',\n        trigger: 'blur'\n      }],\n      workTime: [{\n        type: 'date',\n        required: true,\n        message: 'Iltimos ishlash vaqtini kiriting',\n        trigger: 'change'\n      }]\n    });\n    const submitForm = async formEl => {\n      if (!formEl) return;\n      await formEl.validate(valid => {\n        if (valid) {\n          if (doctorId.value) {\n            console.log('sss');\n            useDoctors().updateDoctor(ruleForm);\n          } else {\n            useDoctors().createDoctor(ruleForm);\n          }\n          router.go(-1);\n        } else {\n          useToast().error(\"Xato malumot kiritildi\");\n        }\n      });\n    };\n    const getOneDoctor = id => {\n      Request({\n        url: `doctor/${id}`,\n        method: \"get\"\n      }).then(res => {\n        ruleForm.doctorName = res.data.name;\n        ruleForm.category = res.data.category;\n        ruleForm.serviceCost = res.data.serviceCost;\n        ruleForm.surname = res.data.surname;\n        ruleForm.workTime = res.data.workTime;\n      }).catch(error => {\n        useToast().error(error);\n      });\n    };\n    const resetForm = formEl => {\n      if (!formEl) return;\n      formEl.resetFields();\n    };\n    onMounted(() => {\n      useDoctors().getAllDoctors();\n      if (router.currentRoute.value.params.doctorId) {\n        doctorId.value = router.currentRoute.value.params.doctorId;\n        ruleForm.doctorId = router.currentRoute.value.params.doctorId;\n        console.log(ruleForm);\n        getOneDoctor(doctorId.value);\n      }\n    });\n    const __returned__ = {\n      ruleFormRef,\n      storeDoctor,\n      doctors,\n      doctorId,\n      ruleForm,\n      rules,\n      submitForm,\n      getOneDoctor,\n      resetForm,\n      onMounted,\n      reactive,\n      ref,\n      get useDoctors() {\n        return useDoctors;\n      },\n      get useToast() {\n        return useToast;\n      },\n      get router() {\n        return router;\n      },\n      TheComponentHeader,\n      get Request() {\n        return Request;\n      },\n      get storeToRefs() {\n        return storeToRefs;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["onMounted","reactive","ref","useDoctors","useToast","router","TheComponentHeader","Request","storeToRefs","ruleFormRef","storeDoctor","doctors","doctorId","ruleForm","name","dateOfBirth","surname","category","serviceCost","advertisementName","region","city","address","gender","rules","doctorName","required","message","trigger","workTime","type","submitForm","formEl","validate","valid","value","console","log","updateDoctor","createDoctor","go","error","getOneDoctor","id","url","method","then","res","data","catch","resetForm","resetFields","getAllDoctors","currentRoute","params"],"sources":["/Users/air/Documents/crm-front/src/views/register/RegisterForm.vue"],"sourcesContent":["<template>\n    <TheComponentHeader \n    header-title=\"Doktor qo'shish\"\n    route=\"DoctorList\"\n    btn-title=\"Orqaga\"\n    />\n    <el-form\n    ref=\"ruleFormRef\"\n    :model=\"ruleForm\"\n    :rules=\"rules\"\n    class=\"demo-ruleForm\"\n    >\n    <el-form-item label=\"Bemor ismi\" prop=\"doctorName\">\n        <el-input v-model=\"ruleForm.doctorName\"  autosize/>\n    </el-form-item>\n    <el-form-item label=\"Bemor familiyasi\" prop=\"surname\">\n        <el-input v-model=\"ruleForm.surname\" type=\"input\" />\n    </el-form-item>\n    <el-form-item label=\"Kategoriyasi\" prop=\"category\">\n        <el-input v-model=\"ruleForm.category\" type=\"input\" />\n    </el-form-item>\n    <el-form-item label=\"Nima orqali kelgan\" prop=\"advertisementName\">\n        <el-input v-model=\"ruleForm.advertisementName\" type=\"input\" />\n    </el-form-item>\n    <el-form-item label=\"Doktor\" prop=\"doctorId\">\n        <el-select v-model=\"ruleForm.doctorId\">\n            <el-option\n            v-for=\"doctor in doctors\" \n            :key=\"doctor.id\"\n            :label=\"doctor.name + '(' + doctor.category + ')'\"\n            :value=\"doctor.id\"\n            >\n        </el-option>\n    </el-select>\n</el-form-item>\n\n<el-form-item label=\"Tug'ilgan sanasi\" required>\n    <el-date-picker\n    v-model=\"ruleForm.dateOfBirth\"\n    is-range\n    range-separator=\"To\"\n    start-placeholder=\"Start time\"\n    end-placeholder=\"End time\"\n    />\n</el-form-item>\n<el-form-item label=\"Jinsi\" prop=\"gender\">\n    <el-radio-group v-model=\"ruleForm.gender\" size=\"large\">\n        <el-radio-button label=\"ERKAK\" />\n        <el-radio-button label=\"AYOL\" />\n    </el-radio-group>\n</el-form-item>\n</el-form>\n<div>\n    <el-button type=\"primary\" @click=\"submitForm(ruleFormRef)\">\n        Create\n    </el-button>\n    <el-button @click=\"resetForm(ruleFormRef)\">Reset</el-button>\n</div>\n</template>\n\n<script setup>\nimport { onMounted, reactive, ref } from 'vue'\nimport { useDoctors } from \"@/store/doctors.pinia\"\nimport { useToast } from \"@/store/toast.pinia\"\nimport router from '@/router';\nimport TheComponentHeader from '@/components/TheComponentHeader.vue';\nimport Request from '@/api';\nimport { storeToRefs } from 'pinia';\nconst ruleFormRef = ref();\nconst storeDoctor = useDoctors();\n\nconst { doctors } = storeToRefs(storeDoctor);\nconst doctorId = ref(null)\n\nconst ruleForm = reactive({\n    name: '',\n    dateOfBirth: null,\n    surname: '',\n    category: '',\n    serviceCost:'',\n    advertisementName:'',\n    region:'',\n    city:'',\n    doctorId:null,\n    address:'',\n    gender: 'ERKAK'\n})\n\nconst rules = reactive({\n    doctorName: [\n    { required: true, message: 'Iltimos ism kiriting', trigger: 'blur' },\n    ],\n    surname: [\n    {\n        required: true,\n        message: 'Iltimos familiya kiriting',\n        trigger: 'blur',\n    },\n    ],\n    category: [\n    {\n        required: true,\n        message: 'Iltimos kategoriya kiriting',\n        trigger: 'blur',\n    },\n    ],\n    serviceCost: [\n    {\n        required: true,\n        message: 'Iltimos xizmat narxini kiriting',\n        trigger: 'blur',\n    },\n    ],\n    workTime: [\n    {\n        type: 'date',\n        required: true,\n        message: 'Iltimos ishlash vaqtini kiriting',\n        trigger: 'change',\n    },\n    ]\n})\n\nconst submitForm = async (formEl) => {\n    if (!formEl) return\n    await formEl.validate((valid) => {\n        if (valid) {\n            if(doctorId.value){\n                console.log('sss');\n                useDoctors().updateDoctor(ruleForm);\n            }else{\n                useDoctors().createDoctor(ruleForm);\n            }\n            router.go(-1)\n        } else {\n            useToast().error(\"Xato malumot kiritildi\")\n        }\n    })\n}\n\nconst getOneDoctor = (id) => {\n    Request({\n        url:`doctor/${id}`,\n        method:\"get\"\n    }).then((res) => {\n        ruleForm.doctorName =  res.data.name\n        ruleForm.category =  res.data.category\n        ruleForm.serviceCost =  res.data.serviceCost\n        ruleForm.surname =  res.data.surname\n        ruleForm.workTime =  res.data.workTime\n    }).catch((error) => {\n        useToast().error(error)\n    })\n}\n\nconst resetForm = (formEl) => {\n    if (!formEl) return\n    formEl.resetFields()\n}\n\nonMounted(() => {\n    useDoctors().getAllDoctors()\n    if(router.currentRoute.value.params.doctorId){\n        doctorId.value = router.currentRoute.value.params.doctorId;\n        ruleForm.doctorId = router.currentRoute.value.params.doctorId;\n        console.log(ruleForm);\n        getOneDoctor(doctorId.value);\n    }\n})\n</script>\n\n\n<style scoped>\n.demo-ruleForm{\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n}\n\n.demo-ruleForm .el-form-item{\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}